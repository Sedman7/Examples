# Базовые приемы работы с массивами
# my_list.append(x)					Добавляет элемент в конец списка
# list.extend(L)						Расширяет список my_list, добавляя в конец все элементы списка L
# my_list.insert(i, x)				Вставляет на i-ый элемент значение x
# my_list.remove(x)					Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
# my_list.index(x, [start [, end]])	Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
# my_list.count(x)					Возвращает количество элементов со значением x
# len(my_list)						Возвращает количество элементов массива
# my_list.sort([key=функция])			Сортирует список на основе функции
# my_list.reverse()					Разворачивает список
# my_list.copy()						Поверхностная копия списка
# my_list.clear()						Очищает список

test = [2, 5, 4, 6, 8]  # создаем определенный массив
test.remove(4)          # удаляем из массива элемент со значением 4, именно значение, т.е. будет удален 2-й элемент
test.insert(1, 9)		# вставляем на 9-ку на 1-ю позицию
test.sort()				# сортируем массив
print(test, '\n')

vals = []                       # создаем неопределенный массив

tmp = [[1, 2, 3], 5]            # добавим данные во временный массив
vals.append(tmp)                # добавим элемент в массив через временный массив

vals.append([[6, 7, 8], 9])     # добавим элемент в массив на прямую
vals.append([[2, 5, 3], 1])     # добавим элемент в массив на прямую
vals.append([[1, 8, 8], 5])     # добавим элемент в массив на прямую

def array_in(arr):
    print(arr)
    print(arr[0][0])
    print(arr[0][1])

    print('Full length:', len(vals))
    print('vals[0] length:', len(vals[0]))
    print('vals[0][0] length:', len(vals[0][0]), ' \n')

array_in(vals)
